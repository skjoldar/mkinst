#!/bin/bash

# Check whether Linux or Mac
ARCH=`uname -a|awk '{print $1}'`

#######################################################################################
# Check if TOKEN is set

if [ -z ${TOKEN+x} ]; then echo "Set token first"; exit 1;
fi


#######################################################################################
# For proxy -  check ssh status so ansible can continue with provisioning

function is_it_up_yet
{
  echo "Wait for node's ssh"
  until ssh -o "StrictHostKeyChecking=no" -i ~/DO2 -T root@$IP exit # 2>/dev/null
   do
     echo -n '.'
     sleep 5
   done
  echo ''
}


#######################################################################################
function get_ip
{
  IP=`cat ~/droplet_ip`
  cat hosts_template |sed "s/IP/$IP/g" > hosts
}


#######################################################################################
function init_plain_host
{
  ansible-playbook digitalocean-plain-up.yml --extra-vars="do_token=`echo $TOKEN`"
  get_ip
}


#######################################################################################
function kill_plain_host
{
  ansible-playbook digitalocean-plain-down.yml --extra-vars="do_token=`echo $TOKEN`"
}


#######################################################################################
function init_docker_host
{
  ansible-playbook digitalocean-docker-up.yml --extra-vars="do_token=`echo $TOKEN`"
  get_ip

}


#######################################################################################
function kill_docker_host
{
  ansible-playbook digitalocean-docker-down.yml --extra-vars="do_token=`echo $TOKEN`"
}


#######################################################################################
function remove_ssh_entry
{
# Remove known_hosts entry
  IP=`cat ~/droplet_ip`
  case $ARCH in
   Linux)
    sed -i "/$IP/d" ~/.ssh/known_hosts 
    ;;
   Darwin)
    sed -i "" "/$IP/d" ~/.ssh/known_hosts 
    ;;
  esac
}


#######################################################################################
function show_hosts
{
echo; curl -X GET -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" "https://api.digitalocean.com/v2/droplets" |jq '.droplets[].name'; echo
}


#######################################################################################
function init_proxy_host
{
  ansible-playbook digitalocean-proxy-up.yml --extra-vars="do_token=`echo $TOKEN`"
  get_ip
  is_it_up_yet
  ansible-playbook -i hosts squid.yml 
}


#######################################################################################
function kill_proxy_host
{
  ansible-playbook digitalocean-proxy-down.yml --extra-vars="do_token=`echo $TOKEN`"
  remove_ssh_entry
}



#######################################################################################
# Main script

case $1 in

 plain)
  case $2 in 
   up)
   init_plain_host
   ;;
   down)
   kill_plain_host
   ;;
   *)
   echo "Please use up or down"
   ;;
  esac
  ;;

 docker)
  case $2 in 
   up)
   init_docker_host
   ;;
   down)
   kill_docker_host
   ;;
   *)
   echo "Please use up or down"
   ;;
  esac
  ;;

 proxy)
  case $2 in 
   up)
   init_proxy_host
   ;;
   down)
   kill_proxy_host
   ;;
   *)
   echo "Please use up or down"
   ;;
  esac
  ;;

 show)
  show_hosts
  ;;

 *)
  echo " Usage: mkinst plain|docker|proxy|showi up|down"
  ;;
esac


